# Left: OS host(: on linux)  dir(3 parts)  git  PS
format = '$os$hostname${env_var.context_sep}${custom.dir_ell}${custom.dir_parent}${custom.dir_current}$character'
right_format = "$status$cmd_duration$jobs$time$git_branch$git_status"
add_newline = false

# --- Ellipsis: print "…/" only when depth >= 3 (home-relative if inside ~) ---
[custom.dir_ell]
when = true
command = '''
p="$PWD"

# at ~ -> nothing
[ "$p" = "$HOME" ] && exit 0

case "$p" in
  "$HOME"/*)
    rel=${p#"$HOME"/}
    [ -z "$rel" ] && exit 0
    slashes=$(printf '%s' "$rel" | tr -cd '/' | wc -c | tr -d ' ')
    depth=$((slashes + 1))
    [ "$depth" -ge 3 ] && printf "…/"
    ;;
  *)
    pp=${p#/}
    if [ -n "$pp" ]; then
      slashes=$(printf '%s' "$pp" | tr -cd '/' | wc -c | tr -d ' ')
      depth=$((slashes + 1))
    else
      depth=0
    fi
    [ "$depth" -ge 3 ] && printf "…/"
    ;;
esac
'''
format = '[$output](fg:bright-black)'

# --- Parent directory: adds "~/" for depth==2 under ~; plain for deeper ---
[custom.dir_parent]
when = true
command = '''
p="$PWD"

# at ~ -> nothing
[ "$p" = "$HOME" ] && exit 0

case "$p" in
  "$HOME"/*)
    rel=${p#"$HOME"/}
    if [ -n "$rel" ]; then
      slashes=$(printf '%s' "$rel" | tr -cd '/' | wc -c | tr -d ' ')
      depth=$((slashes + 1))   # 1: ~/X, 2: ~/X/Y, 3+: deeper
    else
      depth=0
    fi

    if [ "$depth" -eq 1 ]; then
      printf "~/"
    elif [ "$depth" -eq 2 ]; then
      par="$(basename "$(dirname "$p")")"
      printf "~/%s/" "$par"
    elif [ "$depth" -ge 3 ]; then
      par="$(basename "$(dirname "$p")")"
      printf "%s/" "$par"
    fi
    ;;
  *)
    parent="$(dirname "$p")"
    if [ "$parent" != "/" ] && [ "$parent" != "$HOME" ]; then
      printf "%s/" "$(basename "$parent")"
    fi
    ;;
esac
'''
format = '[$output](italic fg:bright-black)'

# --- Current directory: "~" at home; otherwise just the basename (no "~/" here) ---
[custom.dir_current]
when = true
command = '''
p="$PWD"

if [ "$p" = "$HOME" ]; then
  printf "~"
else
  printf "%s" "$(basename "$p")"
fi
'''
format = '[$output](italic fg:purple)'

[os]
disabled = false
format = "[$symbol]($style) "
style = "fg:#9e9e9e"
[os.symbols]
Macos = ""
Linux = ""
Windows = ""

[hostname]
ssh_only = false
format = "[$hostname]($style)"
style = "fg:blue"

[env_var.context_sep]
variable = "PROMPT_CONTEXT_SEP"
default = ":"
format = '[$env_value](fg:bright-black)'

[git_branch]
# leading space here ensures spacing only when in a repo
format = " [$symbol$branch]($style)"
symbol = "·"            # or " "
style = "fg:bright-black"

[git_status]
# Show one leading space and parentheses only when there’s anything to show.
format = """\
            ([·❪](fg:bright-black)\
            $staged\
            $modified\
            $renamed\
            $deleted\
            $conflicted\
            [$untracked](yellow)\
            $ahead_behind\
            $stashed\
            [❫](fg:bright-black))\
            """
style = "fg:bright-black"

# Per-status strings with counts
staged    = '+${count}'
modified  = '!${count}'
renamed   = '»${count}'
deleted   = '✘${count}'
conflicted= '~${count}'
untracked = '?${count}'
stashed   = '*${count}'

# Sync counts
ahead     = '⇡${count} '
behind    = '⇣${count} '
diverged  = '⇕⇡${ahead_count}⇣${behind_count} '

[character]
success_symbol = ' [%](bold fg:green)'
error_symbol = ' [%](bold fg:red)'
