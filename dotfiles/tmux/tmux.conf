##### basics
set -g mouse on
setw -g mode-keys vi
set -g history-limit 200000
set -g escape-time 0
set -g repeat-time 200

##### terminal features / colors
# Prefer tmux-256color if terminfo exists; else fall back.
if-shell 'infocmp -x tmux-256color >/dev/null 2>&1' \
  'set -g default-terminal "tmux-256color"' \
  'set -g default-terminal "screen-256color"'

set -as terminal-features ',xterm*:clipboard,RGB'
set -as terminal-features ',alacritty*:clipboard,RGB'
set -as terminal-features ',wezterm*:clipboard,RGB'
set -as terminal-features ',kitty*:clipboard,RGB'

##### clipboard
# Let tmux sync with terminal clipboard via OSC52 and allow pass-through from apps (nvim).
set -g set-clipboard on
set -g allow-passthrough on   # tmux >= 3.3

# Choose a native clipboard helper when available (local sessions).
set -g @copy_cmd 'printf %s'  # safe fallback (no-op pipe)
if-shell 'command -v pbcopy >/dev/null'  'set -g @copy_cmd "pbcopy"'
if-shell 'command -v wl-copy >/dev/null' 'set -g @copy_cmd "wl-copy"'
if-shell 'command -v xclip  >/dev/null'  'set -g @copy_cmd "xclip -selection clipboard -in"'

# Copy-mode (vi) bindings â†’ copy to tmux buffer AND to OS clipboard when possible.
bind -T copy-mode-vi v      send -X begin-selection
bind -T copy-mode-vi V      send -X select-line
bind -T copy-mode-vi y      send -X copy-pipe-and-cancel "#{@copy_cmd}"
bind -T copy-mode-vi Enter  send -X copy-pipe-and-cancel "#{@copy_cmd}"
bind -T copy-mode-vi Escape send -X clear-selection

##### pane movement (outside Neovim; inside, your plugin handles it)
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R
bind -n C-\\ select-pane -l
bind -n C-Space select-pane -t :.+
unbind '"'
unbind %
bind - split-window -v
bind | split-window -h

##### quality of life
set -g visual-bell off
setw -g aggressive-resize on
