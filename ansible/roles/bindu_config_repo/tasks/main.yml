---
# roles/bindu_config_repo/tasks/main.yml
# Ensure ~/.config is a git clone of your Bindu repo on the branch you choose.
# Defaults can be overridden in group_vars/host_vars:
#   bindu_remote: git@github.com:suhailphotos/bindu.git (or https://...)
#   bindu_branch: main
#   bindu_config_dir: ~/.config

- name: Defaults
  set_fact:
    bindu_remote: "{{ bindu_remote | default('https://github.com/suhailphotos/bindu.git') }}"
    bindu_branch: "{{ bindu_branch | default('main') }}"
    bindu_config_dir: "{{ bindu_config_dir | default(ansible_env.HOME + '/.config') }}"

- name: Stat ~/.config
  stat:
    path: "{{ bindu_config_dir }}"
  register: cfg

- name: Stat ~/.config/.git (only if ~/.config exists)
  stat:
    path: "{{ bindu_config_dir }}/.git"
  register: cfg_git
  when: cfg.stat.exists

# Normalize: derive "is repo" flag safely
- name: Assume not a repo when cfg_git undefined
  set_fact:
    cfg_is_repo: false
  when: cfg_git is not defined

- name: Flag as repo if .git exists
  set_fact:
    cfg_is_repo: "{{ cfg_git.stat.exists | default(false) }}"
  when: cfg_git is defined

# If ~/.config exists but is NOT a repo, move it aside
- name: Move aside pre-existing non-repo ~/.config
  when:
    - cfg.stat.exists
    - not cfg_is_repo
  shell: |
    set -e
    mv "{{ bindu_config_dir }}" "{{ bindu_config_dir }}.pre-bindu.{{ ansible_date_time.iso8601_basic }}"
    mkdir -p "{{ bindu_config_dir | dirname }}"
  args: { executable: /bin/bash }

# For existing repo, check its origin; otherwise this will be skipped
- name: Read origin for existing repo
  command: git -C "{{ bindu_config_dir }}" remote get-url origin
  register: existing_origin
  changed_when: false
  failed_when: false
  when: cfg_is_repo

# ðŸ”§ Normalize both URLs (strip tokens, .git, and unify SSH â†’ https) before comparing
- name: Normalize origin/remote URLs
  set_fact:
    bindu_origin_norm: >-
      {{
        (existing_origin.stdout | default(''))
        | regex_replace('^ssh://', '')
        | regex_replace('^git@github.com:', 'https://github.com/')
        | regex_replace('^https?://[^@]+@', 'https://')
        | regex_replace('\.git$', '')
        | lower
      }}
    bindu_remote_norm: >-
      {{
        bindu_remote
        | regex_replace('^ssh://', '')
        | regex_replace('^git@github.com:', 'https://github.com/')
        | regex_replace('^https?://[^@]+@', 'https://')
        | regex_replace('\.git$', '')
        | lower
      }}
  when: cfg_is_repo

# If itâ€™s some other repo, move it aside (now using normalized comparison)
- name: If repo is not Bindu, move it aside
  when:
    - cfg_is_repo
    - bindu_origin_norm | default('') != bindu_remote_norm | default('')
  shell: |
    set -e
    mv "{{ bindu_config_dir }}" "{{ bindu_config_dir }}.pre-bindu.{{ ansible_date_time.iso8601_basic }}"
  args: { executable: /bin/bash }

# Ensure parent exists before (re)cloning
- name: Ensure parent exists
  file:
    path: "{{ bindu_config_dir | dirname }}"
    state: directory
    mode: "0755"

# Clone/update Bindu into ~/.config (force fast-forward to desired branch)
- name: Clone/update Bindu into ~/.config
  git:
    repo: "{{ bindu_remote }}"
    dest: "{{ bindu_config_dir }}"
    version: "{{ bindu_branch }}"
    depth: 1
    single_branch: yes
    update: yes
    accept_hostkey: yes
    force: yes

# Ensure we track origin/{{ bindu_branch }}
- name: Ensure we track origin/{{ bindu_branch }}
  shell: |
    set -e
    git -C "{{ bindu_config_dir }}" checkout -q "{{ bindu_branch }}"
    git -C "{{ bindu_config_dir }}" branch --set-upstream-to "origin/{{ bindu_branch }}" "{{ bindu_branch }}" || true
  args: { executable: /bin/bash }

# Ignore macOS metadata
- name: Ignore macOS metadata
  lineinfile:
    path: "{{ bindu_config_dir }}/.gitignore"
    create: yes
    line: "**/.DS_Store"
    state: present
