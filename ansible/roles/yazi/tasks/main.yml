---
# roles/yazi/tasks/main.yml
#

- name: Skip Yazi when disabled
  meta: end_host
  when: not (yazi_enabled | default(true) | bool)

- name: Defaults
  set_fact:
    yazi_manage_prereqs: "{{ yazi_manage_prereqs | default(false) | bool }}"
    yazi_install_scope:  "{{ yazi_install_scope | default('system') }}"   # 'system' or 'user'

# Figure out the *login* user's HOME even when the play uses become
- name: Determine login user
  set_fact:
    # prefer SUDO_USER if present; fall back to the connected user
    yazi_login_user: "{{ ansible_env.SUDO_USER | default(ansible_user_id | default(ansible_user)) }}"

- name: Determine login user's HOME (portable)
  become: false
  shell: |
    set -e
    if command -v getent >/dev/null 2>&1; then
      getent passwd "{{ yazi_login_user }}" | cut -d: -f6
    else
      eval echo ~{{ yazi_login_user }}
    fi
  args: { executable: /bin/bash }
  register: yazi_home_cmd
  changed_when: false

- name: Set per-user paths (phase 1)
  set_fact:
    yazi_user_home:  "{{ yazi_home_cmd.stdout | trim }}"
    yazi_user_bin:   "{{ (yazi_home_cmd.stdout | trim) ~ '/.local/bin' }}"
    yazi_user_cargo: "{{ (yazi_home_cmd.stdout | trim) ~ '/.cargo/bin' }}"
    yazi_src_dir:    "{{ (yazi_home_cmd.stdout | trim) ~ '/.local/src/yazi' }}"
    yazi_system_bin: "/usr/local/bin"

# --- safety check ---
- name: Sanity check resolved HOME
  fail:
    msg: "Could not resolve home for {{ yazi_login_user }} (got '{{ yazi_user_home }}')"
  when: (yazi_user_home | trim) == ''

- name: Set per-user paths (phase 2)
  set_fact:
    yazi_user_path: "{{ yazi_user_bin }}:{{ yazi_user_cargo }}:{{ ansible_env.PATH }}"

# Quick presence check (both user + system prefixes on PATH)
- name: Check for yazi
  become: false
  command: bash -lc 'command -v yazi'
  register: yazi_cmd
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_system_bin }}:{{ yazi_user_path }}"

# -----------------------
# macOS path (brew)
# -----------------------
- name: macOS | install prerequisites (optional)
  when: ansible_system == "Darwin" and yazi_manage_prereqs
  community.general.homebrew:
    name:
      - ffmpeg
      - jq
      - poppler
      - imagemagick
      - resvg
      - 7zip
      - fd
      - ripgrep
      - fzf
      - zoxide
      - bat
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

- name: macOS | install yazi
  when: ansible_system == "Darwin" and yazi_cmd.rc != 0
  community.general.homebrew:
    name: yazi
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

# -----------------------
# Debian/Ubuntu (build from source)
# -----------------------
- block:
    - name: Debian/Ubuntu | runtime + build prerequisites
      when: yazi_manage_prereqs
      become: yes
      apt:
        name:
          - git            # needed for the clone when running only -t yazi
          - curl           # needed for rustup
          - ca-certificates
          - file
          - fd-find
          - ripgrep
          - fzf
          - jq
          - ffmpeg
          - poppler-utils
          - p7zip-full
          - imagemagick
          - xclip
          - wl-clipboard
          - zoxide
          - build-essential
          - pkg-config
        state: present
        update_cache: yes

    - name: Debian/Ubuntu | try resvg (best-effort)
      when: yazi_manage_prereqs
      become: yes
      apt:
        name: resvg
        state: present
        update_cache: yes
      register: resvg_apt
      failed_when: false

    # Optional nicety: fd → fdfind symlink (system-wide)
    - name: Check for /usr/bin/fdfind
      become: yes
      stat:
        path: /usr/bin/fdfind
      register: fdfind_stat

    - name: Debian/Ubuntu | ensure fd symlink (fdfind → fd)
      become: yes
      file:
        src: /usr/bin/fdfind
        dest: /usr/local/bin/fd
        state: link
      when: fdfind_stat.stat.exists

    - name: Install rustup for the user if missing
      become: false
      shell: |
        set -e
        export PATH="{{ yazi_user_cargo }}:{{ ansible_env.PATH }}"
        command -v cargo >/dev/null 2>&1 || \
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args: { executable: /bin/bash }
      changed_when: false

    - name: Update stable toolchain (best-effort)
      become: false
      shell: |
        set -e
        export PATH="{{ yazi_user_cargo }}:{{ ansible_env.PATH }}"
        rustup update stable || true
      args: { executable: /bin/bash }
      changed_when: false
      failed_when: false

    - name: Ensure source dir exists
      become: false
      file:
        path: "{{ yazi_src_dir }}"
        state: directory
        mode: "0755"

    - name: Clone/update Yazi
      become: false
      git:
        repo: https://github.com/sxyazi/yazi.git
        dest: "{{ yazi_src_dir }}"
        version: main
        depth: 1
        single_branch: yes
        update: yes
        accept_hostkey: yes

    - name: cargo build --release --locked
      become: false
      shell: |
        set -e
        export PATH="{{ yazi_user_cargo }}:{{ yazi_user_bin }}:{{ ansible_env.PATH }}"
        cargo build --release --locked
      args:
        executable: /bin/bash
        chdir: "{{ yazi_src_dir }}"
      changed_when: true

    # ---- install step: system or user ----
    - name: Install yazi to /usr/local/bin (system scope)
      when: yazi_install_scope == 'system'
      become: yes
      copy:
        src: "{{ yazi_src_dir }}/target/release/yazi"
        dest: "{{ yazi_system_bin }}/yazi"
        mode: "0755"
        remote_src: yes

    - name: Install ya to /usr/local/bin (if built) or symlink
      when: yazi_install_scope == 'system'
      become: yes
      block:
        - stat:
            path: "{{ yazi_src_dir }}/target/release/ya"
          register: ya_built

        - copy:
            src: "{{ yazi_src_dir }}/target/release/ya"
            dest: "{{ yazi_system_bin }}/ya"
            mode: "0755"
            remote_src: yes
          when: ya_built.stat.exists

        - file:
            src: "{{ yazi_system_bin }}/yazi"
            dest: "{{ yazi_system_bin }}/ya"
            state: link
          when: not ya_built.stat.exists

    - name: Install yazi to ~/.local/bin (user scope)
      when: yazi_install_scope == 'user'
      become: false
      block:
        - file:
            path: "{{ yazi_user_bin }}"
            state: directory
            mode: "0755"
        - copy:
            src: "{{ yazi_src_dir }}/target/release/yazi"
            dest: "{{ yazi_user_bin }}/yazi"
            mode: "0755"
            remote_src: yes
        - stat:
            path: "{{ yazi_src_dir }}/target/release/ya"
          register: ya_user_built
        - copy:
            src: "{{ yazi_src_dir }}/target/release/ya"
            dest: "{{ yazi_user_bin }}/ya"
            mode: "0755"
            remote_src: yes
          when: ya_user_built.stat.exists
        - file:
            src: "{{ yazi_user_bin }}/yazi"
            dest: "{{ yazi_user_bin }}/ya"
            state: link
          when: not ya_user_built.stat.exists

    - name: Ensure PATH for login shells (Linux, user scope)
      when: yazi_install_scope == 'user'
      become: false
      block:
        - lineinfile:
            path: "{{ yazi_user_home }}/.profile"
            create: yes
            line: 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"'
            state: present
        - lineinfile:
            path: "{{ yazi_user_home }}/.zprofile"
            create: yes
            line: 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"'
            state: present

  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0

# Final verification
- name: Final check (print version)
  become: false
  command: bash -lc 'command -v yazi && yazi -V'
  register: yazi_final
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_system_bin }}:{{ yazi_user_path }}"

- name: Debug final yazi presence
  debug:
    msg: "{{ yazi_final.stdout | default('yazi not found') }}"
