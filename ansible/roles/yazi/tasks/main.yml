---
# roles/yazi/tasks/main.yml

- set_fact:
    yazi_manage_prereqs: "{{ yazi_manage_prereqs | default(false) | bool }}"
    yazi_install_snap: "{{ yazi_install_snap | default(false) | bool }}"

# Detect existing yazi (include ~/.local/bin and /snap/bin in PATH for checks)
- name: Check for yazi
  command: bash -lc 'command -v yazi'
  register: yazi_cmd
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin:/snap/bin"

# -----------------------
# Prerequisites
# -----------------------

- name: macOS | install Yazi prerequisites
  when: ansible_system == "Darwin" and yazi_manage_prereqs
  community.general.homebrew:
    name:
      - ffmpeg
      - jq
      - poppler
      - imagemagick
      - resvg
      - 7zip
      - fd
      - ripgrep
      - fzf
      - zoxide
      - bat
      - unzip
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

- name: Debian/Ubuntu | install Yazi prerequisites (no resvg)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name:
      - file
      - fd-find
      - ripgrep
      - fzf
      - jq
      - ffmpeg
      - poppler-utils
      - p7zip-full
      - imagemagick
      - xclip
      - wl-clipboard
      - zoxide
      - bat
    state: present
    update_cache: yes

# resvg is not in many Ubuntu repos → try but don't fail play
- name: Debian/Ubuntu | try resvg (best-effort)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name: resvg
    state: present
    update_cache: yes
  register: resvg_apt
  failed_when: false

# -----------------------
# Package-manager installs
# -----------------------

- name: macOS | install yazi with brew
  when: ansible_system == "Darwin" and yazi_cmd.rc != 0
  community.general.homebrew:
    name: yazi
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

- name: Debian/Ubuntu | try apt install yazi
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: yes
  apt:
    name: yazi
    state: present
    update_cache: yes
  register: yazi_apt
  failed_when: false

- name: Recheck yazi after package manager
  command: bash -lc 'command -v yazi'
  register: yazi_cmd_after_pm
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin:/snap/bin"

# -----------------------
# Snap fallback (Ubuntu/Debian) — tolerant, won’t abort the play
# -----------------------
- block:
    - name: Ensure snapd is installed
      apt:
        name: snapd
        state: present
        update_cache: yes
      become: yes

    - name: Enable & start snapd
      systemd:
        name: snapd
        state: started
        enabled: yes
      become: yes

    - name: Wait for snap seed to complete
      command: snap wait system seed.loaded
      become: yes
      register: snap_seed
      changed_when: false
      retries: 20
      delay: 3
      until: snap_seed.rc == 0

    # Use plain command, and DO NOT fail the play if it errors (e.g. classic blocked)
    - name: Install yazi via snap (classic)
      command: snap install yazi --classic
      become: yes
      register: snap_yazi
      failed_when: false
      changed_when: "'yazi' in (snap_yazi.stdout | default('')) or 'yazi' in (snap_yazi.stderr | default(''))"

  when:
    - ansible_facts.os_family == "Debian"
    - yazi_install_snap | default(false) | bool
    - yazi_cmd_after_pm.rc != 0

# -----------------------
# Final checks + Ubuntu niceties
# -----------------------

- name: Final check
  command: bash -lc 'command -v yazi || test -x /snap/bin/yazi'
  register: yazi_final_path
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin:/snap/bin"

- name: Debug final yazi presence
  debug:
    msg: "yazi resolved to: {{ yazi_final_path.stdout | default('NOT FOUND') }}"

# Provide fd/bat compat symlinks on Ubuntu if needed
- name: Provide 'fd' symlink to 'fdfind' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/fdfind
    dest: /usr/local/bin/fd
    state: link
  when: >
    ansible_facts.os_family == "Debian" and
    (lookup('pipe', 'command -v fdfind || true') | length) > 0 and
    (lookup('pipe', 'test -x /usr/local/bin/fd || echo no') | trim) == 'no'

- name: Provide 'bat' symlink to 'batcat' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/batcat
    dest: /usr/local/bin/bat
    state: link
  when: >
    ansible_facts.os_family == "Debian" and
    (lookup('pipe', 'command -v batcat || true') | length) > 0 and
    (lookup('pipe', 'test -x /usr/local/bin/bat || echo no') | trim) == 'no'

- name: Recheck after snap attempt
  command: bash -lc 'command -v yazi || test -x /snap/bin/yazi'
  register: yazi_cmd_after_snap
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin:/snap/bin"
