---
# roles/yazi/tasks/main.yml

- set_fact:
    yazi_manage_prereqs: "{{ yazi_manage_prereqs | default(false) | bool }}"
    yazi_use_script_fallback: "{{ yazi_use_script_fallback | default(false) | bool }}"
    # Sane system PATH + user's local bin at the end (for checks only)
    yazi_check_path: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:{{ ansible_env.HOME }}/.local/bin"
    # Let this be overridden if needed
    yazi_fallback_url: "{{ yazi_fallback_url | default('https://raw.githubusercontent.com/sxyazi/yazi/main/install.sh') }}"

# Try to find yazi first (as root on Debian hosts since play uses become)
- name: Check for yazi
  command: bash -lc 'command -v yazi'
  register: yazi_cmd
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_check_path }}"

# macOS prerequisites (only if enabled)
- name: macOS | install Yazi prerequisites
  when: ansible_system == "Darwin" and yazi_manage_prereqs
  community.general.homebrew:
    name:
      - ffmpeg
      - jq
      - poppler
      - imagemagick
      - resvg
      - 7zip
      - fd
      - ripgrep
      - fzf
      - zoxide
      - bat
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

# Debian/Ubuntu prerequisites (only if enabled)
- name: Debian/Ubuntu | install Yazi prerequisites
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name:
      - file
      - fd-find
      - ripgrep
      - fzf
      - jq
      - ffmpeg
      - poppler-utils
      - p7zip-full
      - imagemagick
      - xclip
      - wl-clipboard
      - resvg
    state: present
    update_cache: yes
  register: yazi_prereqs

# -----------------------
# macOS: Homebrew install
# -----------------------
- name: macOS | install yazi with brew
  when: ansible_system == "Darwin" and yazi_cmd.rc != 0
  community.general.homebrew:
    name: yazi
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

# -----------------------
# Debian/Ubuntu: apt first
# -----------------------
- name: Debian/Ubuntu | try apt install
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: yes
  apt:
    name: yazi
    state: present
    update_cache: yes
  register: yazi_apt
  failed_when: false   # don't abort on older distros where yazi isn't packaged

# Recheck after package-manager work (don’t hide /usr/bin)
- name: Recheck yazi after package manager
  command: bash -lc 'command -v yazi'
  register: yazi_cmd_after_pm
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_check_path }}"

# -----------------------
# Optional fallback (opt-in): upstream installer into user’s ~/.local/bin
# -----------------------
- name: Ensure ~/.local/bin exists (user)
  become: false
  file:
    path: "{{ ansible_env.HOME }}/.local/bin"
    state: directory
    mode: "0755"
  when: yazi_cmd_after_pm.rc != 0 and yazi_use_script_fallback

- name: Download Yazi installer script
  become: false
  get_url:
    url: "{{ yazi_fallback_url }}"
    dest: "/tmp/yazi_install.sh"
    mode: "0755"
  when: yazi_cmd_after_pm.rc != 0 and yazi_use_script_fallback

- name: Run Yazi installer script (to ~/.local/bin)
  become: false
  shell: /tmp/yazi_install.sh -y -b "{{ ansible_env.HOME }}/.local/bin"
  args: { executable: /bin/bash }
  changed_when: false
  when: yazi_cmd_after_pm.rc != 0 and yazi_use_script_fallback

# Final check (consider user-local bin too)
- name: Final check
  command: bash -lc 'command -v yazi'
  register: yazi_cmd_final
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_check_path }}"

# Nice-to-have symlinks for Ubuntu (fd & bat naming quirks)
- name: Provide 'fd' symlink to 'fdfind' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/fdfind
    dest: /usr/local/bin/fd
    state: link
  when: ansible_facts.os_family == "Debian" and (lookup('pipe', 'command -v fdfind || true') | length) > 0

- name: Provide 'bat' symlink to 'batcat' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/batcat
    dest: /usr/local/bin/bat
    state: link
  when: ansible_facts.os_family == "Debian" and (lookup('pipe', 'command -v batcat || true') | length) > 0
