---
# roles/yazi/tasks/main.yml

- name: Defaults
  set_fact:
    yazi_manage_prereqs: "{{ yazi_manage_prereqs | default(false) | bool }}"

# Figure out the *login* user's HOME even when the play is become: yes
- name: Determine remote login user HOME (no sudo)
  become: false
  vars:
    login_user: >-
      {{ ansible_user
         | default(ansible_env.SUDO_USER)
         | default(ansible_env.LOGNAME)
         | default(ansible_user_id) }}
  command: bash -lc 'printf %s "~{{ login_user }}"'
  register: yazi_home_echo
  changed_when: false

- name: Set per-user facts
  set_fact:
    yazi_login_user: >-
      {{ ansible_user
         | default(ansible_env.SUDO_USER)
         | default(ansible_env.LOGNAME)
         | default(ansible_user_id) }}
    yazi_user_home: "{{ yazi_home_echo.stdout }}"
    yazi_user_bin:  "{{ yazi_home_echo.stdout }}/.local/bin"
    yazi_user_cargo: "{{ yazi_home_echo.stdout }}/.cargo/bin"
    yazi_user_path: "{{ yazi_user_bin }}:{{ yazi_user_cargo }}:{{ ansible_env.PATH }}"

# Quick presence check (user PATH)
- name: Check for yazi (user PATH)
  become: false
  command: bash -lc 'command -v yazi'
  register: yazi_cmd
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_user_path }}"

# -----------------------
# macOS path (unchanged)
# -----------------------
- name: macOS | install Yazi prerequisites
  when: ansible_system == "Darwin" and yazi_manage_prereqs
  community.general.homebrew:
    name:
      - ffmpeg
      - jq
      - poppler
      - imagemagick
      - resvg
      - 7zip
      - fd
      - ripgrep
      - fzf
      - zoxide
      - bat
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

- name: macOS | install yazi with brew
  when: ansible_system == "Darwin" and yazi_cmd.rc != 0
  community.general.homebrew:
    name: yazi
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

# -----------------------
# Debian/Ubuntu: prereqs + build from source
# -----------------------
- name: Debian/Ubuntu | install Yazi prerequisites (runtime)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name:
      - file
      - fd-find
      - ripgrep
      - fzf
      - jq
      - ffmpeg
      - poppler-utils
      - p7zip-full
      - imagemagick
      - xclip
      - wl-clipboard
      - zoxide
    state: present
    update_cache: yes

# Optional SVG support (best effort)
- name: Debian/Ubuntu | try resvg (best-effort)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name: resvg
    state: present
    update_cache: yes
  register: resvg_apt
  failed_when: false

# Build toolchain (tiny, per upstream note: needs gcc/make)
- name: Debian/Ubuntu | install build toolchain
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: yes
  apt:
    name:
      - build-essential
      - pkg-config
    state: present
    update_cache: yes

# Rustup/Cargo for the *user* (no sudo)
- name: Debian/Ubuntu | install rustup if missing (user)
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: false
  shell: |
    set -e
    export PATH="{{ yazi_user_cargo }}:{{ ansible_env.PATH }}"
    if ! command -v cargo >/dev/null 2>&1; then
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    fi
  args: { executable: /bin/bash }
  changed_when: false

- name: Debian/Ubuntu | ensure toolchain is up to date (user)
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: false
  shell: |
    set -e
    export PATH="{{ yazi_user_cargo }}:{{ ansible_env.PATH }}"
    rustup update stable
  args: { executable: /bin/bash }
  changed_when: false
  failed_when: false

# Source location under the user home
- name: Debian/Ubuntu | ensure source dir exists (user)
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: false
  file:
    path: "{{ yazi_user_home }}/.local/src/yazi"
    state: directory
    mode: "0755"

- name: Debian/Ubuntu | clone/update Yazi (user)
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: false
  git:
    repo: https://github.com/sxyazi/yazi.git
    dest: "{{ yazi_user_home }}/.local/src/yazi"
    version: main
    depth: 1
    single_branch: yes
    update: yes
    accept_hostkey: yes

- name: Debian/Ubuntu | cargo build --release (user)
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: false
  shell: |
    set -e
    export PATH="{{ yazi_user_cargo }}:{{ yazi_user_bin }}:{{ ansible_env.PATH }}"
    cargo build --release --locked
  args:
    executable: /bin/bash
    chdir: "{{ yazi_user_home }}/.local/src/yazi"
  changed_when: true

- name: Debian/Ubuntu | install yazi/ya to ~/.local/bin (user)
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: false
  shell: |
    set -e
    mkdir -p "{{ yazi_user_bin }}"
    install -Dm755 "target/release/yazi" "{{ yazi_user_bin }}/yazi"
    if [ -x "target/release/ya" ]; then
      install -Dm755 "target/release/ya" "{{ yazi_user_bin }}/ya"
    else
      ln -sf yazi "{{ yazi_user_bin }}/ya"
    fi
  args: { executable: /bin/bash, chdir: "{{ yazi_user_home }}/.local/src/yazi" }
  changed_when: true

# Ensure PATH for login shells (user)
- name: Ensure ~/.local/bin on PATH for zsh (Linux)
  when: ansible_facts.os_family == "Debian"
  become: false
  lineinfile:
    path: "{{ yazi_user_home }}/.zprofile"
    create: yes
    line: 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"'
    state: present

- name: Ensure ~/.local/bin on PATH for POSIX shells (Linux)
  when: ansible_facts.os_family == "Debian"
  become: false
  lineinfile:
    path: "{{ yazi_user_home }}/.profile"
    create: yes
    line: 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"'
    state: present

# Final verification in the user context
- name: Final check (print actual path if present)
  become: false
  command: bash -lc 'command -v yazi && yazi -V'
  register: yazi_final
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ yazi_user_path }}"

- name: Debug final yazi presence
  debug:
    msg: "{{ yazi_final.stdout | default('yazi not found') }}"
