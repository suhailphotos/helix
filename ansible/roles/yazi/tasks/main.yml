---
# roles/yazi/tasks/main.yml

- set_fact:
    yazi_manage_prereqs: "{{ yazi_manage_prereqs | default(false) | bool }}"
    yazi_install_snap: "{{ yazi_install_snap | default(false) | bool }}"
    # PATH for detection: include system bins, ~/.local/bin, and /snap/bin
    yazi_check_path: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:{{ ansible_env.HOME }}/.local/bin:/snap/bin"

# 1) Check for yazi first
- name: Check for yazi
  command: bash -lc 'command -v yazi'
  register: yazi_cmd
  changed_when: false
  failed_when: false
  environment: { PATH: "{{ yazi_check_path }}" }

# 2) macOS prereqs via brew (opt-in)
- name: macOS | install Yazi prerequisites
  when: ansible_system == "Darwin" and yazi_manage_prereqs
  community.general.homebrew:
    name:
      - ffmpeg
      - jq
      - poppler
      - imagemagick
      - resvg
      - 7zip
      - fd
      - ripgrep
      - fzf
      - zoxide
      - bat
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

# 3) Debian/Ubuntu prereqs via apt (opt-in) — NO 'resvg' here
- name: Debian/Ubuntu | install Yazi prerequisites (no resvg)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name:
      - file
      - fd-find
      - ripgrep
      - fzf
      - jq
      - ffmpeg
      - poppler-utils
      - p7zip-full
      - imagemagick
      - xclip
      - wl-clipboard
    state: present
    update_cache: yes

# Optional, best-effort resvg (not available on many Ubuntu/Debian)
- name: Debian/Ubuntu | try resvg (best-effort)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name: resvg
    state: present
    update_cache: yes
  register: resvg_apt
  failed_when: false

# 4) Install yazi itself
## macOS via brew
- name: macOS | install yazi with brew
  when: ansible_system == "Darwin" and yazi_cmd.rc != 0
  community.general.homebrew:
    name: yazi
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

## Debian/Ubuntu via apt (many releases don't have it — we won't fail)
- name: Debian/Ubuntu | try apt install yazi
  when: ansible_facts.os_family == "Debian" and yazi_cmd.rc != 0
  become: yes
  apt:
    name: yazi
    state: present
    update_cache: yes
  register: yazi_apt
  failed_when: false

# Recheck after any package-manager work
- name: Recheck yazi after package manager
  command: bash -lc 'command -v yazi'
  register: yazi_cmd_after_pm
  changed_when: false
  failed_when: false
  environment: { PATH: "{{ yazi_check_path }}" }

# 5) Optional fallback on Debian/Ubuntu: Snap
- name: Ensure snapd (for snap fallback)
  when: ansible_facts.os_family == "Debian" and yazi_cmd_after_pm.rc != 0 and yazi_install_snap
  become: yes
  apt:
    name: snapd
    state: present
    update_cache: yes

- name: Install yazi via snap (classic)
  when: ansible_facts.os_family == "Debian" and yazi_cmd_after_pm.rc != 0 and yazi_install_snap
  become: yes
  command: snap install yazi --classic
  register: yazi_snap
  changed_when: "'installed' in (yazi_snap.stdout | default('')) or yazi_snap.rc == 0"
  failed_when: false

# Final check
- name: Final check
  command: bash -lc 'command -v yazi'
  register: yazi_cmd_final
  changed_when: false
  failed_when: false
  environment: { PATH: "{{ yazi_check_path }}" }

# 6) Ubuntu niceties: fd/bat naming quirks
- name: Provide 'fd' symlink to 'fdfind' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/fdfind
    dest: /usr/local/bin/fd
    state: link
  when: ansible_facts.os_family == "Debian" and (lookup('pipe', 'command -v fdfind || true') | length) > 0

- name: Provide 'bat' symlink to 'batcat' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/batcat
    dest: /usr/local/bin/bat
    state: link
  when: ansible_facts.os_family == "Debian" and (lookup('pipe', 'command -v batcat || true') | length) > 0
