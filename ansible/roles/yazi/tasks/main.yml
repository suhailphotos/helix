---
# roles/yazi/tasks/main.yml

# ------------------------------------------------------------
# Base facts (knobs)
# ------------------------------------------------------------
- set_fact:
    yazi_manage_prereqs: "{{ yazi_manage_prereqs | default(false) | bool }}"
    yazi_repo_url: "https://github.com/sxyazi/yazi.git"
    yazi_src_dir: "{{ yz_user_home | default(ansible_env.HOME) }}/.local/src/yazi"
    yazi_bin_dir: "{{ yz_user_home | default(ansible_env.HOME) }}/.local/bin"

# Figure out the *real* remote user's HOME even when play uses become: yes
- name: Determine remote user HOME
  become: false
  shell: 'printf %s "$HOME"'
  args: { executable: /bin/bash }
  register: yz_home_cmd
  changed_when: false

- name: Set yazi per-user facts
  set_fact:
    yz_user_home: "{{ yz_home_cmd.stdout | trim }}"
    yz_user_path: "{{ (yz_home_cmd.stdout | trim) + '/.local/bin:' + (yz_home_cmd.stdout | trim) + '/.cargo/bin:/snap/bin:' + ansible_env.PATH }}"

# ------------------------------------------------------------
# Quick probe (portable)
# ------------------------------------------------------------
- name: Check for yazi (user PATH)
  become: false
  shell: |
    PATH="{{ yz_user_path }}"
    command -v yazi 2>/dev/null || true
  args: { executable: /bin/bash }
  register: yazi_cmd
  changed_when: false
  failed_when: false

# ------------------------------------------------------------
# macOS path (unchanged)
# ------------------------------------------------------------
- name: macOS | install Yazi prerequisites
  when: ansible_system == "Darwin" and yazi_manage_prereqs
  community.general.homebrew:
    name:
      - ffmpeg
      - jq
      - poppler
      - imagemagick
      - resvg
      - 7zip
      - fd
      - ripgrep
      - fzf
      - zoxide
      - bat
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

- name: macOS | install yazi with brew
  when: ansible_system == "Darwin" and (yazi_cmd.stdout | length) == 0
  community.general.homebrew:
    name: yazi
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

# ------------------------------------------------------------
# Debian/Ubuntu: install prereqs (runtime tools) + build deps
# ------------------------------------------------------------
- name: Debian/Ubuntu | install Yazi prerequisites (runtime)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name:
      - file
      - fd-find
      - ripgrep
      - fzf
      - jq
      - ffmpeg
      - poppler-utils
      - p7zip-full           # “7zip” on macOS, “p7zip-full” on Debian/Ubuntu
      - imagemagick
      - xclip
      - wl-clipboard
      - zoxide
    state: present
    update_cache: yes

# Best-effort: resvg (often missing in Ubuntu repos)
- name: Debian/Ubuntu | try resvg (best-effort)
  when: ansible_facts.os_family == "Debian" and yazi_manage_prereqs
  become: yes
  apt:
    name: resvg
    state: present
    update_cache: yes
  failed_when: false

# Build prerequisites
- name: Debian/Ubuntu | install build toolchain
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: yes
  apt:
    name:
      - build-essential
      - pkg-config
      - curl
      - git
      - ca-certificates
    state: present
    update_cache: yes

# ------------------------------------------------------------
# Debian/Ubuntu: build from source as the *user*
# ------------------------------------------------------------
- name: Debian/Ubuntu | install rustup if missing (user)
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: false
  shell: |
    test -x "{{ yz_user_home }}/.cargo/bin/cargo" || \
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  args: { executable: /bin/bash }
  environment:
    HOME: "{{ yz_user_home }}"
  changed_when: false

- name: Debian/Ubuntu | ensure toolchain is up to date (user)
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: false
  shell: "{{ yz_user_home }}/.cargo/bin/rustup update"
  args: { executable: /bin/bash }
  environment:
    HOME: "{{ yz_user_home }}"
    PATH: "{{ yz_user_home }}/.cargo/bin:{{ ansible_env.PATH }}"
  changed_when: false
  failed_when: false

- name: Debian/Ubuntu | ensure source dir exists (user)
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: false
  file:
    path: "{{ yazi_src_dir }}"
    state: directory
    mode: "0755"

- name: Debian/Ubuntu | clone/update Yazi repo (user)
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: false
  git:
    repo: "{{ yazi_repo_url }}"
    dest: "{{ yazi_src_dir }}"
    # You can pin a release tag if you prefer. 'main' keeps you current:
    version: "main"
    depth: 1
    single_branch: yes
    update: yes
    accept_hostkey: yes

- name: Debian/Ubuntu | cargo build --release --locked (user)
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: false
  shell: "{{ yz_user_home }}/.cargo/bin/cargo build --release --locked"
  args:
    executable: /bin/bash
    chdir: "{{ yazi_src_dir }}"
  environment:
    HOME: "{{ yz_user_home }}"
    PATH: "{{ yz_user_home }}/.cargo/bin:{{ ansible_env.PATH }}"

- name: Debian/Ubuntu | install built binaries to ~/.local/bin (user)
  when: ansible_facts.os_family == "Debian" and (yazi_cmd.stdout | length) == 0
  become: false
  shell: |
    install -Dm755 "{{ yazi_src_dir }}/target/release/yazi" "{{ yazi_bin_dir }}/yazi"
    if [ -f "{{ yazi_src_dir }}/target/release/ya" ]; then
      install -Dm755 "{{ yazi_src_dir }}/target/release/ya" "{{ yazi_bin_dir }}/ya"
    else
      ln -sf yazi "{{ yazi_bin_dir }}/ya"
    fi
  args: { executable: /bin/bash }

# ------------------------------------------------------------
# Ubuntu niceties (fd/bat compatibility names)
# ------------------------------------------------------------
- name: Provide 'fd' symlink to 'fdfind' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/fdfind
    dest: /usr/local/bin/fd
    state: link
  when: >
    ansible_facts.os_family == "Debian" and
    (lookup('pipe', 'command -v fdfind || true') | length) > 0 and
    (lookup('pipe', 'test -x /usr/local/bin/fd || echo no') | trim) == 'no'

- name: Provide 'bat' symlink to 'batcat' (Ubuntu)
  become: yes
  file:
    src: /usr/bin/batcat
    dest: /usr/local/bin/bat
    state: link
  when: >
    ansible_facts.os_family == "Debian" and
    (lookup('pipe', 'command -v batcat || true') | length) > 0 and
    (lookup('pipe', 'test -x /usr/local/bin/bat || echo no') | trim) == 'no'

# ------------------------------------------------------------
# Ensure PATH for interactive shells
# ------------------------------------------------------------
- name: Ensure ~/.local/bin and ~/.cargo/bin on PATH for zsh (Linux)
  when: ansible_facts.os_family == "Debian"
  become: false
  lineinfile:
    path: "{{ yz_user_home }}/.zprofile"
    create: yes
    line: 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"'
    state: present

- name: Ensure ~/.local/bin and ~/.cargo/bin on PATH for POSIX shells (Linux)
  when: ansible_facts.os_family == "Debian"
  become: false
  lineinfile:
    path: "{{ yz_user_home }}/.profile"
    create: yes
    line: 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"'
    state: present

# ------------------------------------------------------------
# Final verification
# ------------------------------------------------------------
- name: Final check (print actual path if present)
  become: false
  shell: |
    PATH="{{ yz_user_path }}"
    command -v yazi 2>/dev/null || true
  args: { executable: /bin/bash }
  register: yazi_final_path
  changed_when: false
  failed_when: false

- name: Debug final yazi presence
  debug:
    msg: "yazi resolved to: {{ yazi_final_path.stdout | trim | default('NOT FOUND') }}"
