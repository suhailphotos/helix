---
- name: Only run on macOS
  meta: end_host
  when: ansible_system != "Darwin"

# Find Homebrew
- name: Detect Homebrew (Apple Silicon path)
  stat:
    path: /opt/homebrew/bin/brew
  register: brew_path_opt

- name: Detect Homebrew (Intel path)
  stat:
    path: /usr/local/bin/brew
  register: brew_path_usr

- name: Fail if Homebrew not found
  fail:
    msg: "Homebrew not found. Run the base macOS play first."
  when: not brew_path_opt.stat.exists and not brew_path_usr.stat.exists

- name: Set brew_bin path fact
  set_fact:
    brew_bin: "{{ '/opt/homebrew/bin/brew' if brew_path_opt.stat.exists else '/usr/local/bin/brew' }}"

# Build final list: baseline + host extras â€“ host skips
- name: Build desktop cask target list
  set_fact:
    desktop_casks_final: >-
      {{ ((desktop_casks | default([])) + (desktop_casks_extra | default([])))
         | unique
         | difference(desktop_casks_skip | default([])) }}

# Pass 1: try to bring apps under brew with --force
- name: Try install/overwrite casks with --force
  community.general.homebrew_cask:
    name: "{{ item }}"
    state: present
    path: "{{ brew_bin }}"
    install_options: [force]
  loop: "{{ desktop_casks_final }}"
  loop_control: { label: "{{ item }}" }
  register: cask_force
  ignore_errors: yes

# Pass 2: for failures, accept external apps (graceful, no hard fail)
- name: Accept external apps for failed items
  community.general.homebrew_cask:
    name: "{{ item.item }}"
    state: present
    path: "{{ brew_bin }}"
    accept_external_apps: true
  when: item.failed | default(false)
  loop: "{{ cask_force.results | default([]) }}"
  loop_control: { label: "{{ item.item }}" }
