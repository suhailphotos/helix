---
# Handle one project ({{ project }}) with block/rescue

- name: Check for pyproject.toml
  stat:
    path: "{{ pkg_dir }}/pyproject.toml"
  register: pyproj
  changed_when: false

- name: Skip non-Poetry project
  debug:
    msg: "Skipping {{ project }} (no pyproject.toml)"
  when: not pyproj.stat.exists

- block:
    - name: Extract python spec from pyproject.toml (via Python tomllib/tomli)
      shell: |
        python3 - <<'PY'
        import sys, json, pathlib
        p = pathlib.Path(r'{{ pkg_dir }}/pyproject.toml')
        try:
            import tomllib  # Py 3.11+
        except ModuleNotFoundError:
            import tomli as tomllib  # fallback if tomllib missing
        with p.open('rb') as f:
            data = tomllib.load(f)
        spec = (data.get('tool', {}).get('poetry', {})
                    .get('dependencies', {}).get('python', '>=3.11,<4.0'))
        print(spec)
        PY
      args: { executable: /bin/bash }
      register: py_spec_cmd
      changed_when: false

    - name: Save python_spec
      set_fact:
        python_spec: "{{ py_spec_cmd.stdout | trim }}"

    - name: Choose interpreter that satisfies spec (prefer {{ houdini_python_patch }})
      shell: |
        set -e
        export PATH="{{ poetry_path_env }}"
        pe="${PYENV_ROOT:-{{ ansible_env.HOME }}/.pyenv}/versions"
        spec='{{ python_spec }}'
        prefer='{{ houdini_python_patch }}'

        choose_for_minor() {
          minor="$1"
          if [ -x "$pe/$prefer/bin/python" ] && printf '%s\n' "$prefer" | grep -q "^$minor\." ; then
            echo "$pe/$prefer/bin/python"; return 0
          fi
          v="$(pyenv versions --bare 2>/dev/null | grep "^${minor}\." | sort -V | tail -1 || true)"
          [ -n "$v" ] && [ -x "$pe/$v/bin/python" ] && { echo "$pe/$v/bin/python"; return 0; }
          return 1
        }

        if printf '%s' "$spec" | grep -Eq '(^|[<>=,[:space:]])\^?3\.11|>=\s*3\.11'; then
          choose_for_minor "3.11" && exit 0
        fi
        if printf '%s' "$spec" | grep -Eq '(^|[<>=,[:space:]])\^?3\.12|>=\s*3\.12'; then
          choose_for_minor "3.12" && exit 0
        fi
        minor="$(printf '%s' "$spec" | grep -Eo '[0-9]+\.[0-9]+' | head -1 || true)"
        if [ -n "$minor" ]; then
          choose_for_minor "$minor" && exit 0
        fi
        # fallback: pyenv global → system python3
        g="$(pyenv global 2>/dev/null | awk '{print $1}' || true)"
        if [ -n "$g" ] && [ -x "$pe/$g/bin/python" ]; then
          echo "$pe/$g/bin/python"; exit 0
        fi
        command -v python3
      args: { executable: /bin/bash, chdir: "{{ pkg_dir }}" }
      environment:
        PATH: "{{ poetry_path_env }}"
        PYENV_ROOT: "{{ pyenv_root.stdout | default(ansible_env.HOME + '/.pyenv') }}"
      register: chosen_python
      changed_when: false

    - name: Report chosen interpreter
      debug:
        msg: "Project {{ project }} → python: {{ chosen_python.stdout | default('n/a') }}  (spec: {{ python_spec | default('n/a') }})"

    - name: poetry env use
      shell: poetry env use "{{ chosen_python.stdout }}"
      args: { executable: /bin/bash, chdir: "{{ pkg_dir }}" }
      environment: { PATH: "{{ poetry_path_env }}" }
      register: env_use
      changed_when: >
        env_use.stdout is search('Creating virtualenv')
        or env_use.stdout is search('Using virtualenv')

    - name: poetry lock --no-update (best-effort)
      shell: poetry lock --no-update
      args: { executable: /bin/bash, chdir: "{{ pkg_dir }}" }
      environment: { PATH: "{{ poetry_path_env }}" }
      register: lock_out
      failed_when: false
      changed_when: lock_out.stdout is search('Writing lock file')

    - name: poetry install (handle lock drift gracefully)
      shell: poetry install -n
      args: { executable: /bin/bash, chdir: "{{ pkg_dir }}" }
      environment: { PATH: "{{ poetry_path_env }}" }
      register: install_out
      failed_when: false

    - name: If install failed, try lock then install again
      when: install_out.rc != 0
      shell: |
        set -e
        poetry lock --no-update
        poetry install -n
      args: { executable: /bin/bash, chdir: "{{ pkg_dir }}" }
      environment: { PATH: "{{ poetry_path_env }}" }

  rescue:
    - name: Soft-fail this project but continue
      debug:
        msg: "Poetry setup FAILED for {{ project }} — {{ ansible_failed_result.msg | default(ansible_failed_result.stderr, true) }}"

  when: pyproj.stat.exists
