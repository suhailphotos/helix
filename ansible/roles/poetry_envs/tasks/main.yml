---
# Compute basics
- name: Compute paths and PATH for pyenv/poetry
  set_fact:
    matrix_root: "{{ matrix_root | default(lookup('env','MATRIX') | default(ansible_env.HOME + '/Library/CloudStorage/Dropbox/matrix', true)) }}"
    matrix_packages_dir: "{{ matrix_packages_dir | default(matrix_root + '/packages') }}"
    poetry_path_env: "{{ ansible_env.HOME }}/.local/bin:/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.HOME }}/.pyenv/bin:{{ ansible_env.HOME }}/.pyenv/shims:{{ ansible_env.PATH }}"
    houdini_python_patch: "{{ houdini_python_patch | default('3.11.7') }}"

# Pick list for this OS
- name: Determine project list for this OS
  set_fact:
    poetry_projects: >-
      {{ poetry_projects
         | default((poetry_projects_macos | default([])) if ansible_system == 'Darwin'
                   else (poetry_projects_linux | default([]))) }}

# Nothing to do? bail on this host
- name: No projects configured -> skip host
  meta: end_host
  when: (poetry_projects | length) == 0

# Get pyenv root (ok if missing; weâ€™ll fall back to python3 later)
- name: Get pyenv root
  command: bash -lc 'pyenv root'
  environment: { PATH: "{{ poetry_path_env }}" }
  register: pyenv_root
  changed_when: false
  failed_when: false

# Loop via include_tasks (this is the key change)
- name: Configure Poetry envs per project
  include_tasks: per_project.yml
  loop: "{{ poetry_projects }}"
  loop_control:
    loop_var: project
    label: "{{ project }}"
  vars:
    pkg_dir: "{{ matrix_packages_dir }}/{{ project }}"
