---
# Always use a runtime clone; never look at a dev copy.
- name: Compute paths
  set_fact:
    helix_remote: "{{ helix_remote | default('https://github.com/suhailphotos/helix.git') }}"
    helix_main_branch: "{{ helix_main_branch | default('main') }}"
    helix_config_branch: "{{ helix_config_branch | default('config') }}"
    helix_repo_dir: "{{ helix_home | default(ansible_env.HOME + '/.helix') }}"
    config_dir: "{{ ansible_env.HOME }}/.config"

# Ensure runtime repo exists (keep it on 'main' so 'config' can be checked out in a worktree)
- name: Ensure runtime helix exists
  git:
    repo: "{{ helix_remote }}"
    dest: "{{ helix_repo_dir }}"
    version: "{{ helix_main_branch }}"
    depth: 1
    single_branch: yes
    update: yes
    accept_hostkey: yes

# Fetch the remote config ref (safe; does not write to local refs/heads/config)
- name: Fetch origin/config
  shell: git -C "{{ helix_repo_dir }}" fetch origin config
  args: { executable: /bin/bash }
  changed_when: false

# Ensure a local branch 'config' that tracks origin/config (create once)
- name: Create local branch 'config' tracking origin/config if missing
  shell: |
    set -e
    if ! git -C "{{ helix_repo_dir }}" show-ref --verify --quiet refs/heads/{{ helix_config_branch }}; then
      git -C "{{ helix_repo_dir }}" branch --track {{ helix_config_branch }} origin/{{ helix_config_branch }}
    fi
  args: { executable: /bin/bash }
  changed_when: false

# If ~/.config is already a git worktree on 'config', skip replacement
- name: Detect current ~/.config branch
  shell: git -C "{{ config_dir }}" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "none"
  args: { executable: /bin/bash }
  register: config_branch
  changed_when: false
  failed_when: false

# Backup a non-worktree ~/.config (only if it has contents)
- name: Backup pre-existing ~/.config (non-worktree)
  when: config_branch.stdout != helix_config_branch
  shell: |
    set -e
    if [ -d "{{ config_dir }}" ] && [ "$(ls -A {{ config_dir }} 2>/dev/null | wc -l)" -gt 0 ]; then
      mv "{{ config_dir }}" "{{ config_dir }}.pre-ansible.{{ ansible_date_time.iso8601_basic }}"
    fi
  args: { executable: /bin/bash }

# Ensure the target directory exists (empty) so worktree add succeeds
- name: Ensure ~/.config exists
  file:
    path: "{{ config_dir }}"
    state: directory
    mode: "0755"

# Add ~/.config as a worktree for the local 'config' branch (idempotent)
- name: Add ~/.config worktree on 'config'
  shell: |
    set -e
    if [ "$(git -C '{{ config_dir }}' rev-parse --abbrev-ref HEAD 2>/dev/null || echo none)" != "{{ helix_config_branch }}" ]; then
      # Remove stray .git to avoid "already a repo" errors
      [ -d "{{ config_dir }}/.git" ] && rm -rf "{{ config_dir }}/.git"
      git -C "{{ helix_repo_dir }}" worktree add "{{ config_dir }}" "{{ helix_config_branch }}"
    fi
  args: { executable: /bin/bash }
  register: wt_add
  changed_when: "'worktree is already at' not in (wt_add.stderr | default(''))"

# Make future updates: pull fast-forward inside the worktree (safe)
- name: Fast-forward ~/.config to origin/config
  shell: |
    set -e
    git -C "{{ config_dir }}" fetch origin config
    git -C "{{ config_dir }}" merge --ff-only origin/config
  args: { executable: /bin/bash }
  changed_when: false

# Friendly ignore
- name: Ignore .DS_Store in ~/.config
  lineinfile:
    path: "{{ config_dir }}/.gitignore"
    create: yes
    line: "**/.DS_Store"
    state: present
