---
# Runtime-only: always use ~/.helix and ignore any dev/Dropbox tree.
- name: Compute paths
  set_fact:
    helix_remote: "{{ helix_remote | default('https://github.com/suhailphotos/helix.git') }}"
    helix_main_branch: "{{ helix_main_branch | default('main') }}"
    helix_config_branch: "{{ helix_config_branch | default('config') }}"
    helix_repo_dir: "{{ helix_home | default(ansible_env.HOME + '/.helix') }}"
    config_dir: "{{ ansible_env.HOME }}/.config"

# Ensure runtime helix exists (shallow clone on main)
- name: Ensure runtime helix exists
  git:
    repo: "{{ helix_remote }}"
    dest: "{{ helix_repo_dir }}"
    version: "{{ helix_main_branch }}"
    depth: 1
    single_branch: yes
    update: yes
    accept_hostkey: yes

# Broaden refspec so we can fetch all remote branches (including config)
- name: Broaden origin refspec and fetch all branches
  shell: |
    set -e
    git -C "{{ helix_repo_dir }}" config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git -C "{{ helix_repo_dir }}" fetch --prune origin
  args: { executable: /bin/bash }
  changed_when: false

# Verify the remote actually has the config branch
- name: Check that origin has {{ helix_config_branch }}
  shell: git -C "{{ helix_repo_dir }}" ls-remote --heads origin "{{ helix_config_branch }}"
  args: { executable: /bin/bash }
  register: lsremote_cfg
  changed_when: false

- name: Fail if origin/{{ helix_config_branch }} does not exist
  fail:
    msg: "Remote {{ helix_remote }} has no branch '{{ helix_config_branch }}'."
  when: (lsremote_cfg.stdout | length) == 0

# Create local tracking branch if missing
- name: Create local tracking branch {{ helix_config_branch }} if missing
  shell: |
    set -e
    if ! git -C "{{ helix_repo_dir }}" show-ref --verify --quiet "refs/heads/{{ helix_config_branch }}"; then
      git -C "{{ helix_repo_dir }}" branch --track "{{ helix_config_branch }}" "origin/{{ helix_config_branch }}"
    fi
  args: { executable: /bin/bash }
  changed_when: false

# If ~/.config is not our worktree, back it up
- name: Backup pre-existing ~/.config if not a git worktree
  shell: |
    set -e
    if [ -d "{{ config_dir }}" ] && [ ! -d "{{ config_dir }}/.git" ]; then
      mv "{{ config_dir }}" "{{ config_dir }}.pre-ansible.{{ ansible_date_time.iso8601_basic }}"
    fi
  args: { executable: /bin/bash }
  changed_when: false

# Add ~/.config worktree (idempotent)
- name: Ensure ~/.config worktree on {{ helix_config_branch }}
  shell: |
    set -e
    if [ "$(git -C '{{ config_dir }}' rev-parse --is-inside-work-tree 2>/dev/null || echo no)" = "no" ]; then
      mkdir -p "{{ config_dir }}"
      git -C "{{ helix_repo_dir }}" worktree add "{{ config_dir }}" "{{ helix_config_branch }}"
    fi
  args: { executable: /bin/bash }
  register: wt_add
  changed_when: "'Preparing worktree' in (wt_add.stdout | default('')) or 'Preparing worktree' in (wt_add.stderr | default(''))"

# Helpful config
- name: Enable worktree.guessRemote
  shell: git -C "{{ helix_repo_dir }}" config worktree.guessRemote true
  changed_when: false

# Friendly default ignores inside the config worktree
- name: Ignore .DS_Store in ~/.config
  lineinfile:
    path: "{{ config_dir }}/.gitignore"
    create: yes
    line: "**/.DS_Store"
    state: present
