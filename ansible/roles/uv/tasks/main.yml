---
- name: Compute paths and project list
  set_fact:
    matrix_root: "{{ matrix_root | default(lookup('env','MATRIX') | default(ansible_env.HOME + '/Library/CloudStorage/Dropbox/matrix', true)) }}"
    matrix_packages_dir: "{{ matrix_packages_dir | default(matrix_root + '/packages') }}"
    uv_projects: >-
      {{ uv_projects
         | default((uv_projects_macos | default([])) if ansible_system == 'Darwin'
                   else (uv_projects_linux | default([]))) }}

    # Use UV's own Python store; default pins (you can extend per-host)
    uv_python_pin_map: "{{ uv_python_pin_map | default({'3.11': houdini_python_patch | default('3.11.7')}) }}"

- name: Build PATH for uv (no pyenv)
  set_fact:
    uv_path_env: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.HOME }}/.local/bin:{{ ansible_env.PATH }}"

# ---- Install uv if missing ----------------------------------------------------
- name: Check uv
  shell: command -v uv
  register: uv_cmd
  changed_when: false
  failed_when: false
  environment: { PATH: "{{ uv_path_env }}" }

- name: macOS | install uv (Homebrew)
  when: ansible_system == "Darwin" and uv_cmd.rc != 0
  community.general.homebrew:
    name: uv
    state: present
    path: "{{ brew_bin | default('/opt/homebrew/bin/brew') }}"

- name: Linux | install uv (official script to ~/.local/bin)
  when: ansible_system == "Linux" and uv_cmd.rc != 0
  shell: curl -LsSf https://astral.sh/uv/install.sh | sh
  args: { executable: /bin/bash }

- name: Ensure ~/.venvs exists for project envs
  file:
    path: "{{ ansible_env.HOME }}/.venvs"
    state: directory
    mode: "0755"

# Nothing to do? bail on this host
- name: No uv projects configured -> skip host
  meta: end_host
  when: (uv_projects | length) == 0

# Preinstall pinned interpreters (e.g., 3.11.7)
- name: Preinstall pinned UV Pythons
  shell: |
    set -e
    for minor in "{{ uv_python_pin_map.keys() | join(' ') }}"; do
      ver="{{ uv_python_pin_map[minor] }}"
      uv python find "$ver" >/dev/null 2>&1 || uv python install "$ver"
    done
  args: { executable: /bin/bash }
  environment: { PATH: "{{ uv_path_env }}" }

# Per-project sync
- name: Iterate projects
  include_tasks: per_project.yml
  loop: "{{ uv_projects }}"
  loop_control:
    loop_var: project
    label: "{{ project }}"
  vars:
    pkg_dir: "{{ matrix_packages_dir }}/{{ project }}"
    uv_path_env: "{{ uv_path_env }}"
    uv_python_pin_map: "{{ uv_python_pin_map }}"
