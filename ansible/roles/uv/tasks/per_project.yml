---
- name: Check pyproject.toml
  stat:
    path: "{{ pkg_dir }}/pyproject.toml"
  register: pyproj
  changed_when: false

- name: Skip if not a Python project
  debug:
    msg: "Skipping {{ project }} (no pyproject.toml)"
  when: not pyproj.stat.exists

- block:
    - name: Derive required minor (X.Y) from pyproject
      shell: |
        python3 - <<'PY'
        import pathlib, re
        p = pathlib.Path(r'{{ pkg_dir }}/pyproject.toml')
        try:
            import tomllib
        except ModuleNotFoundError:
            import tomli as tomllib
        d = tomllib.load(p.open('rb'))
        req = (d.get('project') or {}).get('requires-python')
        if not req:
            req = (((d.get('tool') or {}).get('poetry') or {}).get('dependencies') or {}).get('python')
        ver = ""
        if req:
            m = re.search(r'(\d+\.\d+)', req)  # minor
            if m: ver = m.group(1)
        print(ver)
        PY
      args: { executable: /bin/bash }
      register: minor_guess
      changed_when: false

    - name: Choose interpreter (prefer pinned micro for that minor)
      set_fact:
        uv_python_minor: "{{ (minor_guess.stdout | trim) or '3.11' }}"
        uv_python_version: "{{ uv_pin_map.get((minor_guess.stdout | trim) or '3.11', (minor_guess.stdout | trim) or '3.11') }}"

    - name: Ensure chosen interpreter is installed in UV store
      shell: |
        set -e
        uv python find "{{ uv_python_version }}" >/dev/null 2>&1 || uv python install "{{ uv_python_version }}"
      args: { executable: /bin/bash }
      environment: { PATH: "{{ uv_path_env }}" }

    - name: uv sync (to ~/.venvs/<project>) â€” no activation
      shell: |
        set -e
        UV_PROJECT_ENVIRONMENT="{{ ansible_env.HOME }}/.venvs/{{ project }}" \
        uv sync --python "{{ uv_python_version }}"
      args:
        executable: /bin/bash
        chdir: "{{ pkg_dir }}"
      environment: { PATH: "{{ uv_path_env }}" }
  when: pyproj.stat.exists
